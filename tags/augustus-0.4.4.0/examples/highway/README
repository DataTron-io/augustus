These are two different example projects that use highway sensors as a data source.

EXAMPLE REAL
------- ----
The full example, shows the end-to-end process from model creation to scoring.

There are four sub-directories under the full directory.

    $ pwd
    /home/augustus-testing/augustus/trunk

    $  tree examples/highway/full/
    examples/highway/full/
    |-- consumer
    |   `-- consumer_config.xml
    |-- data
    |   |-- scoring.csv
    |   `-- training.csv
    |-- producer
    |   |-- input.pmml
    |   `-- producer_config.xml
    `-- results
        `-- scores.xml.ref

    4 directories, 6 files


The data directory holds the data used for the example.

The producer directory holds all the files needed to run the producer, other
than the data itself.

The consumer directory holds all the files needed to run the consumer (or
rather it will once you run the producer to produce the model).  Before the
example is run, it only holds the consumer configuration file,
consumer_config.xml
 
The results directory will hold the scores generated by the consumer.  Before
the example is run, it holds a scoring output which is used as a reference copy.
The generated scores should be compared to this file.  See below.

Running the Example

To run this example, change into the producer directory and run
"AugustusBaselineProducer -c producer_config.xml -t 1".

    $ cd examples/highway/full/producer
    $ AugustusBaselineProducer -c producer_config.xml -t 1


The file "producer_config.xml" is a config file for the producer that specifies
the segmentation that we will be using and refrences the training.csv data file
and the input.pmml PMML stub.

The "input.pmml" has all the parts of a PMML baseline model (eg. DataDictionary,
TransformationDictionary, MiningSchema) except for the test distributions.

The output to the screen should look something like the following:

    (0.000 secs)  Producer timer begins
    producer 2010-08-26 13:12:48,239 Read Config File
    (0.032 secs)  Inputting configurations
    (0.049 secs)  Inputting model
    (0.007 secs)  Collecting stats for baseline distribution
    (24.414 secs)  Events 1.000% processed
    (0.609 secs)  Events 2.000% processed
    (0.609 secs)  Events 3.001% processed
    (0.609 secs)  Events 4.001% processed
    (0.608 secs)  Events 5.001% processed
    (0.609 secs)  Events 6.001% processed
    (0.608 secs)  Events 7.001% processed
        ***lines removed***
    (0.613 secs)  Events 96.018% processed
    (0.612 secs)  Events 97.019% processed
    (0.612 secs)  Events 98.019% processed
    (0.612 secs)  Events 99.019% processed
    (0.600 secs)  Events 100.000% processed
    (0.001 secs)  Making test distributions from statistics
        **metadata logging***
    (4.785 secs)  Outputting PMML
    (1.632 secs)  Producer timer ends
    (1 mins 31.303 secs)  Total producer time

Note: A recent addition to Augustus is metadata reporting.  This covers
items like information about the distributions, segments in the model that
do not get matched, etc.  Some more information about this is at
http://code.google.com/p/augustus/wiki/MetaData.  If metadata logging is
enabled, then this example, then where **metadata logging*** is in the output
above, you will see lines like:

    producer 2010-08-26 13:14:13,147 The Empty Segment
    producer 2010-08-26 13:14:13,148 No statistics for this segment Day:0,fielddeviceid:IL-TESTTSC-BISHOP_FORD-N-7001
    producer 2010-08-26 13:14:13,148 No statistics for this segment Day:0,fielddeviceid:IL-TESTTSC-BISHOP_FORD-N-7002
    producer 2010-08-26 13:14:16,232 Segment failed validation or has Zero Variance


Once the producer is finished running, the file "real_baseline.pmml" should now be
in the consumer directory. 

    $ cd ..
    $ tree
    .
    |-- consumer
    |   |-- consumer_config.xml
    |   `-- real_baseline.pmml
    |-- data
    |   |-- scoring.csv
    |   `-- training.csv
    |-- producer
    |   |-- input.pmml
    |   `-- producer_config.xml
    `-- results
        `-- scores.xml.ref


Now you can run the consumer to create scores by running, from the consumer
directory, "AugustusPMMLConsumer -c consumer_config.xml"

    $ cd consumer
    $ AugustusPMMLConsumer -c consumer_config.xml


The file "consumer_config.xml" is a config file for the consumer and references
the newly created "real_baseline.pmml" PMML file, the "scoring.csv" data file
and instructs the consumer to output scores as scores.xml in the reports
directory.  Running the consumer will take about the same amount of time as
running the producer.

The output sent to the terminal is:

    INFO:Augustus:Garbage Collecting of Circular References Disabled
    INFO:Augustus:>>>>>>>>>>>>>>> Preprocess <<<<<<<<<<<<<<<

    INFO:Augustus:>>>>>>>>>>>>>>> Consumer <<<<<<<<<<<<<<<

    No handlers could be found for logger "consumer"
    Initialize model
    Initializing
    Create reader for PMML
    Parse PMML
    Initialize Model
    find model
    Ready to score
    Run Once
    INFO:Augustus:>>>>>>>>>>>>>>> Postprocess <<<<<<<<<<<<<<<


Once you have run the consumer you should see a "scores.xml" file in the results
directory.  If Augustus is set up correctly this file should be the same as
"scores.xml.ref".  The files may not be exactly the same due to floating point
precision or possible a different version of numpy on the scoring machine from
what was used to generated the reference file.  Even with small differences, the
two files should have the same number of lines and the same number of alerts.

    $ cd ../results
    $ wc -l scores.xml*
      123622 scores.xml
      123622 scores.xml.ref
      247244 total

If the files match, then congratulations are in order because you've just
correctly produced and consumed a PMML baseline model.


httpserver
----------

The httpserver example demonstrates runnning the scoring engine as a web
service.

To start the scoring engine, change into the consumer directory and start the
consumer:

    $ pwd
    /home/augustus-testing/augustus/trunk/examples/highway/httpserver

    $ cd consumer
    $ AugustusPMMLConsumer -c config.xml

This starts the service on port 8000.  If that port is not available on your
machine, edit config.xml and declare a different port on the line:

    <fromHTTP url="/score" port="8000" type="XML"/>


Next, in a separate shell (the web service should be running the previous one),
navigate to the scripts sub-directory and run "python test.py".

    $ cd /home/augustus-testing/augustus/trunk/examples/highway/httpserver/scripts
    $ python test.py

This sends data from a sample data file to the consumer and use the results to
write a webpage in the reports sub-directory.

    $ cd ../reports
    $ ls
    README  status.html


You will also see output written to the terminal running the web service while
the events are received and scored.
